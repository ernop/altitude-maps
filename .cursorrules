# Altitude Maps - Cursor Rules

## Project Context
This is a climate visualization project focused on showing temperature and climate patterns by altitude across the globe using Python 3.13.

## Project Organization
- **Top-level markdown docs**: Only `.cursorrules`, `README.md`, and `TECH.md` at root
- **Documentation/learnings**: All other markdown files (guides, summaries, learnings) go in `learnings/` folder
- **Code and resources**: Python scripts, HTML files, etc. can remain at top level
- **Keep it clean**: Minimize documentation clutter at root - maintain clear project structure

## Development Patterns

### Environment
- Always use Python 3.13 virtual environment (`venv`)
- Activate with `.\venv\Scripts\Activate.ps1` in PowerShell
- Dependencies managed via `requirements.txt`

### Code Style
- Use type hints for function parameters and returns
- Keep functions focused and single-purpose
- Document complex data transformations with inline comments
- Use meaningful variable names (prefer `elevation_data` over `ed`)

### Data Handling
- Store raw data in `data/` directory (gitignored)
- Cache processed data to avoid re-downloading (including masked/bordered data)
- Use xarray for multi-dimensional climate data
- Use pandas for tabular data
- Always validate data ranges and handle missing values
- GeoTIFF data uses natural orientation (North up, East right) - no transformations needed
- Use geopandas for geographic borders and masking operations

### Data Format Versioning & Cache Invalidation
⚠️ **CRITICAL**: When changing data processing/export format:
1. **Update the format version number** in export scripts
2. **Add version validation** on data load (fail if version mismatch)
3. **Document the change** in code comments
4. **Re-export ALL cached/generated data** - don't mix old and new formats
5. **Test with multiple regions** to ensure consistency

Cached/Generated Data Locations:
- `data/.cache/` - Masked/bordered raster data (pickled)
- `generated/` - Exported JSON for web viewer
- `generated/regions/` - Per-region exported data

To invalidate all caches after format changes:
```powershell
# Delete cached data
Remove-Item -Recurse -Force data\.cache\*
Remove-Item -Recurse -Force generated\*

# Re-export from source GeoTIFFs
python export_for_web_viewer.py
python download_regions.py  # If using regions
```

### Visualization
- Save outputs to `output/` directory
- Create both static (matplotlib) and interactive (plotly) versions when appropriate
- Use clear, colorblind-friendly color schemes
- Add proper titles, labels, and legends
- Include data source citations in visualizations
- **Vertical Exaggeration**: Uses real-world scale where 1.0 = true Earth proportions, 2.0 = mountains twice as steep as reality. Both X/Z (horizontal) and Y (elevation) axes are in meters based on lat/lon bounds.

### Testing
- Test with small data samples first before processing large datasets
- Verify coordinate systems and projections
- Check data units and conversions
- Validate output visualizations manually

### Documentation
- Update README.md for major feature additions
- Document significant learnings in `learnings/learnings_N_<topic>.md`
- Keep inline code comments focused on "why" not "what"
- Never describe your own work as "stunning", "beautiful", "incredible" - don't be a braggart
- Be humble about work you've done, not ostentatiously humble, just light and clear
- Explain things as needed without self-praise

## Data Sources Strategy

### Elevation Data Priority (User Preference)

**USA - Always Use USGS 3DEP First:**
- Source: USGS 3D Elevation Program (3DEP)
- Resolution: 1-10m (far better than global sources)
- Coverage: Full USA
- Workflow: Download bounding box → Clip to state boundaries → Cache both
- Auth: May require API key (user will provide if needed)
- URL: https://elevation.nationalmap.gov/

**Global - Prefer Nation-Specific Sources:**
Priority order for any country:
1. **National agency data** (if available) - Always check first
   - Examples: Australia (Geoscience), Japan (GSI), Germany (BKG), UK (Ordnance Survey)
   - Often higher resolution and quality than global datasets
   - May require country-specific download process
2. **Global fallback sources** (if national unavailable):
   - OpenTopography SRTM (30m, 60°N to 56°S)
   - Copernicus DEM (30m/90m, global, newest 2021)
   - ASTER GDEM (30m, 83°N to 83°S)
   - ALOS World 3D (30m free, 5m paid)

### Other Data Sources
- **ERA5 Climate Reanalysis**: Comprehensive global climate data
- **WorldClim**: Bioclimatic variables at various resolutions
- **Natural Earth**: Country borders (public domain, 10m/50m/110m resolution)

### Download and Cleaning Philosophy
1. Download by bounding box or tiles (most sources provide this)
2. Clip/mask to administrative boundaries locally (automated)
3. Cache both raw (bounding box) and cleaned (clipped) versions
4. Use two-tier caching to balance flexibility and performance

## Common Commands
```powershell
# Setup/activate environment
.\setup.ps1

# Interactive 3D viewer (primary interface)
python serve_viewer.py  # Visit http://localhost:8001

# Export data for web viewer
python export_for_web_viewer.py data/usa.tif

# Clear all caches (use after format changes)
python clear_caches.py

# Check GeoTIFF orientation
python check_geotiff_orientation.py data/your_file.tif

# Run visualization (static output)
python visualize.py --region global --variable temperature

# Download regions
python download_regions.py

# Work with borders
python border_utils.py --list  # List available countries
python border_utils.py --test your_data.tif  # Test borders on data
```

## Automation Goals
- Minimize manual steps
- Make data acquisition automatic and cached
- Enable one-command visualization generation
- Support parametric variations (regions, variables, time periods)

## Border Features
- **Drawing borders**: Overlay country boundaries on maps
- **Masking data**: Clip elevation to country boundaries
- **177 countries available** from Natural Earth (10m/50m/110m resolution)
- **Automatic caching** of borders and masked data
- **Interactive viewer support**: Export borders for web viewer
- Use `mask_country` parameter to clip data (e.g., "United States of America")
- Use `draw_borders` parameter in rendering to overlay border lines
- Primary workflow: Interactive 3D viewer at localhost:8001

